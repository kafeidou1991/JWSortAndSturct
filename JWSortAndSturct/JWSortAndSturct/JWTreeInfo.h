//
//  JWTreeInfo.h
//  JWSortAndSturct
//
//  Created by 张竟巍 on 2019/3/7.
//  Copyright © 2019 张竟巍. All rights reserved.
//

#ifndef JWTreeInfo_h
#define JWTreeInfo_h

/*
 - tree结构: n个节点的有限集，每一个集合又是一个树，成为根的子树
 - 根节点的个数成为树的度
 - 节点点最大的层次成为树的深度（高度）
 - 中间节点 有双亲 可以有多个孩子
 - 如果将树的子节点从左到右顺序不能改变 成为有序树，否则成为无序树
 */

/*
 二叉树：有n个节点的有限集合，空二叉树（没有元素）
 或者由一个根节点和2个不想交的，分别被称为根节点的左子树、右子树的二叉树组成。
 特点： 1、每个节点最多有2个子树，所以二叉树不存在度大于2的节点
 2、左右子树是有顺序的，不能颠倒、
 3、即使子树有一个节点也要分左子树还是右子树
 二叉树基本形态：
 1、空树二叉树
 2、只有一个根节点
 3、根节点只有左子树
 4、根节点只有右子树
 5、根节点既有左子树又有右子树
 特殊二叉树：
 1、斜树：（所有节点只有左子树/右子树） 称为左斜树/右斜树
 2、满二叉树：所有节点都有左右子树、所有叶子都在同一层上
 3、完全二叉树：相同编号i的节点与满二叉树层次编号一致，则为完全二叉树。满二叉树一定是完全二叉树，但是完全二叉树不一定是满二叉树。
 特点： 1>叶子节点只能出现最下2层。
 2>最下层叶子一定集中在左部连续位置。
 3>倒数第二层如果有u叶子，一定在右部连续位置
 4>如果节点的度为1，则只有左孩子，不存在只存在右孩子的节点
 5>同样节点的二叉树，完全二叉深度最小
 二叉树的基本性质：
 1、在二叉树的i层最多有2^(i-1)个节点。
 2、深度为k的树最多有2^k -1 个节点
 3、对于任何一个二叉树T，如果其终端节点数为n0，度数为2的节点数为n2，则n0 = n2+1；
 4、具有n个节点的完全二叉树，深度|log2n| + 1  //|x|表示不大于x的最大整数
 5、如果有一颗n个节点的完全二叉树的节点按层序编号，对任一节点i有：
 - 如果i=1；是根节点 无双亲，>1双亲节点是|i/2|取最大整数
 - 如果2i>n，则i节点无左孩子，否则左孩子就是2i
 - 如果2i+1>n,则i节点无右孩子，否则右孩子就是2i+1
 
 **二叉树遍历** ：从根节点出发，按照某种次序访问二叉树中的所有节点，使得所有节点都被访问一次，并且只访问一次。
                    ①
                ②      ③
            ④       ⑤   ⑥
          ⑦   ⑧       ⑨
 1、前序遍历：从根节点出发，先前序遍历左子树，在前序遍历右子树。 遍历顺序是： 1->2->4->7->8->3->5->9->6
 2、中序遍历：从根节点开始（注意 不是从根节点访问），中序遍历根节点的左子树，然后访问根节点，最后中序遍历右子树。遍历顺序为：7->4->8->2->1->5->9->3->6
 3、后序遍历：从左到右先叶子后节点的方式左右子树，最后访问根节点。遍历顺序为：7->8->4->2->9->5->6->3->1
 4、层序遍历：从根节点出发，从上到下，从左到右依次访问。遍历顺序：1->2->3->4->5->6->7->8->9
 
 
 **需要注意的是* 根据前序中序 可以确定一个二叉树
               根据后序中序，可以确定一个二叉树
              但是根据前序后序无法确定一个二叉树
 */


#endif /* JWTreeInfo_h */
